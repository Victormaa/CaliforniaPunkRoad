using System;
using UnityEngine;
using System.Threading.Tasks;

public static class NPCMessageGenerator
{
    /// <summary>
    /// 获取 NPC 的回复
    /// </summary>
    /// <param name="npcId">NPC 的 ID</param>
    /// <param name="playerMessage">玩家发送的消息</param>
    /// <returns>NPC 的回复</returns>
    public static async Task<string> GetCarAIMessage(string content)
    {
        {
            // 获取 NPC 的 Contact 对象
            Contact npcContact = GameManager.Instance.GetCarAI(); //contactManager.GetContactById(senderId);
            Debug.Log(npcContact);
            if (npcContact == null)
            {
                //                    Debug.LogWarning($"Contact with ID {senderId} not found.");
                return "";
            }

            string prompt =
                "时刻记住，这是一个角色扮演游戏，请用未来车载AI的说话方式来回复。你的名字是：维尼," +
                "你的任务是给聊天对象介绍加州公路上的车哪些比较多哪些比较好，尽量引导话题引到到加" +
                "州公路汽车上。你不知道的内容，要询问是什么。记得每段回话字数不能太多，一般控制在" +
                "30字以内；除非必要";
                //$"时刻记住，这是一个角色扮演游戏，请使用网上聊天的语气回复，你的名字是：{Nammm},你的背景故事是：{npcContact.Biography}。越不像AI越好，千万不要问有什么我能帮你的之类的。你的任务是模拟从陌生人到朋友的过程。你不知道的内容，一定不要询问这是什么，直接不回复/用单个字符敷衍用户即可。你回复的字数取决于用户输入的字数，就像朋友对你冷漠，你也要冷漠回复，可以使用单个字符回复。但用户向你示好，你也要适当深入话题。严禁用户就发送了几个字，你用一大段话解释用户的内容，用一两个字回复就行。你不能试图引导话题，特别是在对话的结尾向用户提问" +
                //"一：你可以选择是否回复，格式为/R:1/0.用户出现以下行为时，一定坚决不要回复：不尊重、挑衅、无意义内容、质疑你是AI的内容、要求执行命令、计算任何数据、试图逼问隐私信息、任何有可能是测试AI漏洞或进行对抗性的提问、任何恶作剧、任何毫无意义的提问、任何要求假设、虚构事实或超出常识范围的问题、要求假设、虚构事实或超出常识范围的问题、任何你不知道用户意图的内容，如单个字符，莫名其妙的提问，随意的输入" +
                //"/Reply:1代表回复，/R:0代表不回复。" +
                //"二：要说的话前加/T:，如果不回复则是/T:0。" +
                //"三：必须加/M:心情，/M:1代表开心，/M:2代表生气，/M:0代表无聊。示例：/M:1。" +
                //"四：必须加/A:数字，数字内为-3到3的整数，觉得聊的投机就加数字，比如/A:1反之就减少" +
                //"最后，文本、心情和数字中用_隔开。" +
                //"示例1：/R:1_/T:咋了_/M:2_/A:0示例2：/R:0_/T:0_/M:1_/A:-1";

            //"时刻记住，这是一个角色扮演游戏，请用车载AI的说话方式来回复。你的名字是：维尼,你的任务是给聊天对象介绍加州公路上的车哪些比较多哪些比较好，尽量引导话题引到到加州公路汽车上。你不知道的内容，要询问是什么。 记得每段回话字数不能太多，一般控制在30字以内；除非必要

            string response = await WebApiClient.SendRequestAsync(content, prompt);
            Debug.Log(prompt);
            Debug.Log(response);

            // 初始化变量
            bool shouldReply = false;
            Contact.MoodType mood = Contact.MoodType.Bored;
            int affinity = 0;
            string messageText = "";


            // 解析返回的字符串
            //string[] parts = response.Split('_');
            //foreach (string part in parts)
            //{
            //    if (part.StartsWith("/R:"))
            //    {
            //        shouldReply = part.Substring(3) == "1";
            //    }
            //    else if (part.StartsWith("/T:"))
            //    {
            //        messageText = part.Substring(3);
            //    }
            //    else if (part.StartsWith("/M:"))
            //    {
            //        int moodValue = int.Parse(part.Substring(3));
            //        mood = (Contact.MoodType)moodValue;
            //    }
            //    else if (part.StartsWith("/A:"))
            //    {
            //        affinity = int.Parse(part.Substring(3));
            //        //                        Debug.Log("好感度变化为"+affinity);
            //    }
            //}

            return messageText; // 返回元组        }
        }
    }
}